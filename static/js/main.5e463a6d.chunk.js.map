{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","progress","setProggres","normalizedProgress","circumf","Math","PI","actualSize","className","style","height","width","size","cx","normalizedSize","cy","r","strokeDashoffset","circ","strokeDashOffset","strokeDasharray","cir","strokeDashArray","strokeWidth","fontSize","radius","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAyEeA,MAtEf,WACE,IADa,EAImBC,mBAAS,IAJ5B,mBAINC,EAJM,KAIIC,EAJJ,KAoBPC,EAAqB,WACzB,OAAOF,GAAY,EAAI,EAAIA,GAAY,IAAM,IAAMA,GAG/CG,EAAU,WACd,OAAO,EAAIC,KAAKC,GARTC,IAsBT,OACE,yBAAKC,UAAU,OACb,yBACEA,UAAU,gBACVC,MAAO,CACLC,OAAO,GAAD,OA3CD,IA2CC,MACNC,MAAM,GAAD,OA5CA,IA4CA,QAGP,yBAAKD,OArCFE,IAqC4BD,MArC5BC,KAsCD,4BACEC,GAAIC,GACJC,GAAID,GACJE,EAnCDT,GAoCCE,MAAO,CAAEQ,iBAzBM,WACvB,IAAMC,EAAOd,IAEb,OAAOc,EAAQf,IAAuB,IAAOe,EAsBVC,IAC3BC,gBApBc,WACtB,IAAMC,EAAMjB,IACZ,MAAM,GAAN,OAAUiB,EAAV,YAAiBA,GAkBQC,GACjBC,YArDK,KAwDT,yBAAKf,UAAU,aAAaC,MAAO,CAAEe,SAAS,GAAD,OAAKC,GAAL,QAC1CtB,KAGH,4BAAQK,UAAU,aAAakB,QAxDjB,WAClBxB,EAAYD,EAAW,MAuDnB,aCrDY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e463a6d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const size = 200;\n  const stroke = 8;\n\n  const [progress, setProggres] = useState(10);\n\n  const changeState = () => {\n    setProggres(progress + 20);\n  };\n\n  const normalizedSize = () => {\n    return size - 12 * 2;\n  };\n\n  const radius = () => {\n    // calc radius\n    const actualSize = normalizedSize() / 2;\n    return actualSize - stroke * 2;\n  };\n\n  const normalizedProgress = () => {\n    return progress <= 0 ? 0 : progress >= 100 ? 100 : progress;\n  };\n\n  const circumf = () => {\n    return 2 * Math.PI * radius();\n  };\n\n  const strokeDashOffset = () => {\n    const circ = circumf();\n\n    return circ - (normalizedProgress() / 100) * circ;\n  };\n\n  const strokeDashArray = () => {\n    const cir = circumf();\n    return `${cir} ${cir}`;\n  };\n\n  return (\n    <div className=\"App\">\n      <div\n        className=\"icon__wrapper\"\n        style={{\n          height: `${size}px`,\n          width: `${size}px`,\n        }}\n      >\n        <svg height={normalizedSize()} width={normalizedSize()}>\n          <circle\n            cx={normalizedSize() / 2}\n            cy={normalizedSize() / 2}\n            r={radius()}\n            style={{ strokeDashoffset: strokeDashOffset() }}\n            strokeDasharray={strokeDashArray()}\n            strokeWidth={stroke}\n          />\n        </svg>\n        <div className=\"icon__text\" style={{ fontSize: `${radius() - 12}px` }}>\n          {normalizedProgress()}\n        </div>\n\n        <button className=\"btn-toggle\" onClick={changeState}>\n          toggle\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}